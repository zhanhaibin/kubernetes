# j
upstream backend {
  server api-svc.api.svc.cluster.local:80;
}
lua_shared_dict healthcheck 1m;
lua_socket_log_errors off;
init_worker_by_lua_block { 
  local hc =require "resty.upstream.healthcheck"
  local dyups = require "ngx.dyups"
  local ibas = require "ibas"
  local ibas_redis = require "ibas_redis"
  local upstream = require "ngx.upstream"
  local get_upstreams = upstream.get_upstreams
  local delay = 600 -- in seconds
  local check 
  check = function(premature)
    if not preature then
      local us = get_upstreams()
      for _, u in ipairs(us) do
        ngx.log(ngx.ERR,"U:",u)
        if u ~= "backend" and u ~= "_dyups_upstream_down_host_" then 
          local ibas_upstream_time = ibas_redis.get_ibas_redis(u)
          local ot = os.time()
          if os.difftime(ot,ibas_upstream_time) > 200 then
            local status ,rv = dyups.delete(u)
            ngx.log(ngx.ERR,"delete dyups;",u)
            if status ~= ngx.HTTP_OK then
              ngx.log(ngx.ERR,"status",rv)
            end
            local res = ibas.get_platform_delK8s(u)
            ngx.log(ngx.ERR,"delk8s:",res)           
            ibas_redis.set_ibas_redis(u,"null")
          end
        end
      end
    end
  end 
  if 0 == ngx.worker.id() then
    local ok, err = ngx.timer.every(delay, check)
     if not ok then
      ngx.log(ngx.ERR, "failed to create timer: ", err)
      return
    end
  end
}


server {
        listen       80;
        server_name  api.avacloud.com.cn; 
        
        location ~ /lua/(.+) {
           default_type text/html;
           # resolver 223.5.5.5 223.6.6.6;  # 这里位设置阿里的DNS，不设置DNS无法解析http请求的域名
           content_by_lua_file lua/$1.lua;
        }
        location =/status {
          access_log off;
          default_type text/plain;
          content_by_lua_block {
            local hc = require "resty.upstream.healthcheck"
            ngx.say("Nginx Worker PID: ", ngx.worker.pid())
            ngx.print(hc.status_page())
          }
        } 
        location / {
          default_type text/html;
          resolver 223.5.5.5 223.6.6.6;
          
          set $upstream "backend";
          set $new_request_uri ""; 
          access_by_lua_block {
            -- 引用lua脚本，声明变量
            local redis = require "redis"
            local split = require "splitstr"
            local ibas = require "ibas"
            local ibas_redis = require "ibas_redis"
            local ibas_host = "https://app.avacloud.com.cn"
            local namespace = "api"
            -- -------------------------------------------------------
            
            local request_uri = ngx.var.request_uri 		                       -- 获取当前请求URL
            ngx.log(ngx.ERR,"requrl:",request_uri)
              local http_array = split.lua_string_split(request_uri,"/")                 -- URL地址以"/"分割
              local size = table.getn(http_array)                                        -- 分割的字符串数组长度
              local accountencode = http_array[2]                                        -- 客户加密编码
              local accountport = string.sub(http_array[3],2)                            -- 客户账套编号，去掉首字符
              ngx.var.new_request_uri = string.sub(request_uri,14)
              ngx.log(ngx.ERR,"newuri:", ngx.var.new_request_uri)
              ngx.log(ngx.ERR,"accountencode:",accountencode) 
              local customercode = ibas.get_platform_customercode(accountencode)         -- 从console平台获取客户编码，未加密的
              ngx.log(ngx.ERR,"customercode:",customercode) 
              -- if customercode == ngx.null then return end
              ngx.var.upstream = customercode.."-"..accountport                          -- 后台服务upstream名称，客户编码+账号编号+api 如： c00002-05-api
              local getredis = ibas_redis.get_ibas_redis(ngx.var.upstream)               -- 读取缓存记录，条件：客户账套编码 如： c00002-05-api
              ngx.log(ngx.ERR,"ngx.var.upstream",ngx.var.upstream)

              -- 定义访问请求地址url状态，用于测试地址是否有相应。 
              local request_uri_status = ibas.get_request_uri(ibas_host.."/"..ngx.var.upstream.."/config.json") 
              ngx.log(ngx.ERR,"apistatus",request_uri_status)
              -- 返回200成功，说明接口服务已启动，否则，调用平台接口自动启动接口服务容器  
              if request_uri_status ~= 200 then 
                local resk8s = ibas.get_platform_runk8s(ngx.var.upstream,accountport,namespace) 
              end
              -- 后台服务upstream server地址 如：c00002-05.console.svc.cluster.local:80;
              local backend_svc = "server "..customercode.."-"..accountport..".api.svc.cluster.local:80;" 
              if getredis == ngx.null or getredis == "null" then
                ngx.log(ngx.ERR,"upstreams:",backend_svc)
                local res,err = ngx.location.capture("/upstream/"..ngx.var.upstream,{ method = ngx.HTTP_POST,lua_need_request_body = on, body = backend_svc})
                if res.body == "success" then     
                  ibas_redis.set_ibas_redis(ngx.var.upstream,os.time())
                end
              end
             
            }
            if ($request_method = 'OPTIONS') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Allow-Credentials' 'true';
               add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
               add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
               add_header 'Access-Control-Max-Age' 1728000;
               add_header 'Content-Type' 'text/plain; charset=utf-8';
               add_header 'Content-Length' 0;
               return 204;
            }          
            # rewrite ^/(.*)/integration/(.*)$ /integration/$2;

            proxy_pass http://$upstream$new_request_uri;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
          }
        
        location /detail {
          dyups_interface;
        }
        location /list {
          dyups_interface;
        }
        location /upstream {
          dyups_interface;
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
  }


